name: Test and Deploy CI

on:
  push:
    branches: 
      - main

permissions:
  contents: read

jobs:
  run_tests:
    name: Build and test
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest --disable-warnings -q
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/
        ENV: test

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-22.04
    needs: run_tests
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Copy files to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_IP }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "."
        target: "~/projects/${{ vars.APP_NAME }}/"

    - name: Run remote commands on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_IP }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          export ENV=prod
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          export PORT=${{ vars.PORT }}
          export HOST=${{ secrets.VPS_IP }}
          export MJ_APIKEY_PUBLIC=${{ secrets.MJ_APIKEY_PUBLIC }}
          export MJ_APIKEY_PRIVATE=${{ secrets.MJ_APIKEY_PRIVATE }}

          cd ~/projects/${{ vars.APP_NAME }}/

          # Stop existing FastAPI process
          echo "Checking if FastAPI app is running..."
          PIDS=$(ps aux | grep -v grep | grep -i "/venv/bin/python3" | awk '{print $2}')
          if [ -n "$PIDS" ]; then
              echo "Stopping running FastAPI app..."
              kill -9 $PIDS
          fi

          # Activate virtual environment and install dependencies
          echo "Setting up virtual environment..."
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          # Start FastAPI app with Uvicorn
          echo "Starting FastAPI server..."
          nohup venv/bin/uvicorn main:app --host $HOST --port $PORT --workers 4 > app.log 2>&1 &
